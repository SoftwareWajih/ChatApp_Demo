@page "/"
@using System.ComponentModel
@inject IDummy_Services Dummy_Services
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    @* <NoMessagesContent>
        <div>To get started, try asking about these example documents. You can replace these with your own data and replace this message.</div>
        <ChatCitation File="Example_Emergency_Survival_Kit.pdf"/>
        <ChatCitation File="Example_GPS_Watch.pdf"/>
    </NoMessagesContent> *@
    @* <NoMessagesContent>
        <div>Find any posts.</div>
     </NoMessagesContent> *@
    <NoMessagesContent>
        <h1>
            Welcome to AI Exchange!
        </h1>
        <h2>
            Easily check the latest exchange rates for any country in seconds. Smart, fast, and always up to date.
        </h2>
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
    @* <SurveyPrompt /> *@ @* Remove this line to eliminate the template survey message *@
</div>

@code {
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.
        Do not answer questions about anything else.
        Use only simple markdown to format your responses.

        Use the search tool to find relevant information. When you do this, end your
        reply with citations in the special XML format:

        <citation filename='string' page_number='number'>exact quote here</citation>

        Always include the citation in your response if there are results.

        The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.
        Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.
        ";

    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [
            AIFunctionFactory.Create(SearchAsync),
            AIFunctionFactory.Create(GetWeather),
            AIFunctionFactory.Create(DummyPosts),
            AIFunctionFactory.Create(Get_Exchange_Rate)
    ];
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var chunk in ChatClient.GetStreamingResponseAsync(messages, chatOptions, currentResponseCancellation.Token))
        {
            responseText.Text += chunk.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("Whenever possible, specify the filename to search that file only. If not provided, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.FileName}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    private async Task<string> GetWeather([Description("The city, correctly capitalized")] string city)
    {
        string[] weatherValues = ["Sunny", "Cloudy", "Rainy", "Snowy", "Balmy", "Bracing"];
        //return city == "London" ? "Drizzle" : weatherValues[Random.Shared.Next(weatherValues.Length)];
        return await Task.Run(() => city == "London" ? "Drizzle" : weatherValues[Random.Shared.Next(weatherValues.Length)]);
    }

    // // Hardcoded dummy data for Data Retrieval
    // private async Task<List<Dummy_Posts>> DummyPosts([Description("Post title, correctly capitalized")] string postTitle)
    // {
    //     var response = await new HttpClient().GetFromJsonAsync<List<Dummy_Posts>>("https://jsonplaceholder.typicode.com/posts");
    //     var filteredPosts = response?.Where(post => post.title.Contains(postTitle, StringComparison.OrdinalIgnoreCase)).ToList();
    //     return filteredPosts ?? new List<Dummy_Posts>();
    // }

    // Dependency injection for Data Retrieval
    private async Task<List<Dummy_Posts>> DummyPosts([Description("Post title, correctly capitalized")] string postTitle)
    {
        var response = await Dummy_Services.Get_Dummy_Posts(postTitle);
        return response;
    }

    private string FormatExchangeRate(string input)
    {
        // Remove "exchange rate" or "to" from the input
        var cleanedInput = input.Replace("exchange rate", "", StringComparison.OrdinalIgnoreCase)
                                .Replace("to", "", StringComparison.OrdinalIgnoreCase)
                                .Trim();

        // Split the input into currency codes
        var currencies = cleanedInput.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        if (currencies.Length == 2)
        {
            return $"{currencies[0].ToLower()}/{currencies[1].ToLower()}";
        }

        throw new ArgumentException("Invalid exchange rate format. Please provide input in the format 'exchange rate usd eur' or 'usd to eur'.");
    }

    private async Task<double> Get_Exchange_Rate([Description("Exchange rate")] string exchangeRate)
    {
        var formattedExchangeRate = FormatExchangeRate(exchangeRate);
        var response = await Dummy_Services.Get_Exchange_Rate(formattedExchangeRate);
        return response.conversion_rate;
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}